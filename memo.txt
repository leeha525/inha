1. 프로젝트 생성 순서
    express -e web04 : 프로젝트 파일 생성
    cd web04
    npm install : 모듈 설치
     -> node_modules 받아오기
    nodemon : 서버 실행
    http://localhost:3000 : 로컬 서버 포트

2. routes 폴더
    router.get('/', function(req, res, next) {
        res.send('이 문구를 내보낸다'); -> send는 데이터를 내보낸다
        res.render('index', {title : 'Express'}); -> render는 views 파일안에 index.ejs를 출력한다
    })

3. views 폴더
    가. index.ejs
        bootstrap의 css 사용
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
        bootstrap의 js 사용
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
        jquery 함수 사용
        <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
        데이터 사용(템플릿 사용을 위해)
        <script src="https://cdn.jsdelivr.net/npm/handlebars@latest/dist/handlebars.js"></script>
        꾸미기
        <link rel='stylesheet' href='/stylesheets/style.css' />

3. app.js
    가. routes 경로 지정
        var indexRouter = require('./routes/index');
        app.use('/', indexRouter);


4. class
    가. div
        container : 가운데 정렬(아래 요소들 중앙 정렬)
        row : 행
        col : 컬럼
        col-md-4 : middle 해상도일때 4칸 사용 (기존 총 12칸), 작은 창일때는 12칸 모두 사용
        col-lg-3 : large 해상도일때 3칸 사용
        input-group : 입력창
        mb-3 : margine bottom 3
        text-center : 중앙 배치
        text-end : 오른쪽 배치
        modal-dialog modal-lg, modal-xl, modal-sm : 모달 컴포넌트 크기 지정
        modal-body : 모달 컴포넌트 중앙 div 생성

    나. h1
        text-center : 중앙정렬
        my-5 : 위아래(y축) 마진 5(1~5 사이 지정)
    다. script
    라. table
        table : 테이블 행 아래에 줄 표시
        table table-striped : 테이블 행에 줄무늬 적용
        table-hover : 선택한 테이블 표시
    마. input
        form-control : 폼 입력 창
        mb-3 : margine bottom 3
    바. button
        btn btn-primary : 파란색
        btn btn-success : 초록
        btn btn-warning : 노랑
        btn btn-secondary : 회색
        btn btn-danger : 빨강
        btn btn-info : 하늘
        btn btn-lignt : 하양
        btn btn-dark : 검정
        btn btn-link : 링크
        btn btn-sm : 버튼 작게
        px-3 : 테두리 깎기
        w-100 : width 100%
    사. span
        mx-3 : 좌우 마진 3
    아. form
        input-group : 폼 안에 있는 요소들 한줄로
        mb-2 : margin-bottom 2


5. <%-include("menu.ejs")%>
    파일 불러오기

6. <%=title%>
    print, title 변수에 저장된 값 불러오기

7. router 등록
    가. routes 폴더 내 js 폴더 만들기
        // kakao.js
        /* GET kakao page. */
        router.get('/book', function(req, res, next) {
        res.render('index', { title: '도서검색', pageName : 'kakao/book.ejs' });
        });
        -> render : 해당 페이지를 출력한다.
    나. app.js 에 path 지정
        app.use('/kakao', require('./routes/kakao'));

8. api 가져오기
    //book.ejs
    <script>
        // 도서목록 함수
        let query=$(frm.query).val(); -> 초기값 설정, query에 있는 value값인 Node.js 가져오기
        getList(); -> 호출
        // const query = "Node.js"; -> query값(검색어) 지정
        
        // 필수 목록(리스트 불러오기)
        function getList() {
            $.ajx( {
                type : "",
                url : "",
                data : {},
                headers : { "Authorization": "KakaoAK kakao키"},
                success : function(data) {
                    console.log(data);
                }
            });
        }

        function getList(){
            let query=$(frm.query).val();
            $.ajax({ // jquery 사용
                type:"get",
                url:`https://dapi.kakao.com/v3/search/book?target=title`,
                data : {query, size:5, page:1}, // 각 인자값은 함수호출전에 지정해야함 let or const
                 or data : {query, page, size},
                headers:{
                    "Authorization": "KakaoAK 701bc4f81aa44b1eecb2d94e2e8b1124"
                },
                success:function(data){ -> 성공했을때
                    console.log(data);
                    // 순서
                     -> 템플릿 스크립트를 temp에 컴파일 -> div_list 아이디를 불러와서 컴파일한 데이터를 출력
                    const temp = Handlebars.compile($("#temp_list").html()); -> id 호출 : #, 만들었던 핸들바 템플릿을 html로 컴파일
                    $("#div_list").html(temp(data)); -> div의 아이디인 div_list에 temp를 출력하기 위해 #으로 호출 후 출력

                    if(page==1) $("#prev").attr("disabled", true); -> page가 1일때 이전버튼인 #prev의 선택이 불가능한걸 true로 설정
                    else $("#prev").attr("disabled", false); -> page가 1이 아니라면 이전버튼인 #prev의 선택을 disabled한걸 false로 설정

                    const last = Math.ceil(data.meta.pageable_count/size); -> data.meta.pageable_count/size는 마지막 페이지를 가져옴

                    $("#page").html(page); -> page에 
                }
            });
        }
    </script>
    
9. handlebars 템플릿 만들기
    가. script 작성
        <div id="div_list"></div>
        <script id = "temp_list" type = "x-handlebars-template">
            <table>
                {{#each documents}} -> documents 의 개수만큼 tr 출력
                    <tr>
                        <td> <img src = "{{thumbnail}}" > </td> -> 이미지 출력 
                        <td> {{title}} </td>  -> title 출력
                        <td> {{authors}} </td> -> 저자 출력
                    </tr>
                {{/each}}
            </table>
        </script>
    나. 반복문
        {{#each documents}} -> 시작
        {{/each}} -> 종료
    다. script 내 요소 가져오기
        <img src = "{{thumbnail}}">
        {{title}}
        {{authors}}


10. submit 현상(번쩍임-새로고침) 제거
    <form name = "frm">
    <button id = "next">
    <script>
        // frm이 name으로 지정되어있어서 "#id"없이 작성 가능
        $(frm).on("submit", function(e){
          -> form이 submit 되었을때(새로고침) e를 받아서 번쩍임 방지
            e.preventDefault(); -> 깜빡임 제거
            query = $(frm.query).val(); -> form에 작성된 값 받기

            if($(frm.query).val()==""){
                alert("검색어를 입력하세요!");
                $(frm.query).focus();
                return;
            } else { getList(); }
        });

        // id인 경우 page next 버튼 클릭시
        $("#next").on("click", function() {
            page++;
            getList();
        });
    </script>

11. 페이지 표시 - 마지막 페이지 확인
    // 마지막페이지 저장 변수
    // Math.ceil -> 소수점 자릿수 올림
    const last = Math.ceil(data.meta.pageable_count/size);

    // $("#page").html(page);
    $("#page").html(`${page}/${last}`); -> `${ }` : 호출없이 변수 불러오기

12. modal 컴포넌트
    bootstrap - 컴포넌트 - 모달 컴포넌트 - 정적 백드롭(close 버튼 클릭시에만 종료) : 메시지 상자처럼 팝업창 생성

    script 내 생성
    <td><%-include('modal_book.ejs')%></td>

13. 핸들바 no_image 삽입
    <script>
      Handlebars.registerHelper("funThumbnail", function(thumbnail) {
        if(thumbnail) return thumbnail;
        else return "/images/no_image.png";
      });
    </script>
    // thumbnail -> funThumbnail thumbnail
    <td><img src="{{funThumbnail thumbnail}}" width="50px"></td> -> 함수사용처럼 작성


14. firebase
    javascripts/config.js
    // Initialize Firebase
    // 외부에서 사용할거라 export 설정
    export const app = initializeApp(firebaseConfig);

